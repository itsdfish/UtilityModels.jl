var documenterSearchIndex = {"docs":
[{"location":"parameter_estimation/#Expected-Utility-Theory","page":"Parameter Estimation","title":"Expected Utility Theory","text":"","category":"section"},{"location":"parameter_estimation/","page":"Parameter Estimation","title":"Parameter Estimation","text":"The Leaky Competing Accumulator (LCA; Usher & McClelland, 2001) is a sequential sampling model in which evidence for options races independently. The LCA is similar to the Linear Ballistic Accumulator (LBA), but additionally assumes an intra-trial noise and leakage (in contrast, the LBA assumes that evidence accumulates in a ballistic fashion, i.e., linearly and deterministically until it hits the threshold).","category":"page"},{"location":"parameter_estimation/#Example","page":"Parameter Estimation","title":"Example","text":"","category":"section"},{"location":"parameter_estimation/","page":"Parameter Estimation","title":"Parameter Estimation","text":"In this example, we will demonstrate how to use the LCA in a generic two alternative forced choice task. ","category":"page"},{"location":"parameter_estimation/","page":"Parameter Estimation","title":"Parameter Estimation","text":"using Plots\nusing Random\nusing Turing\nusing UtilityModels","category":"page"},{"location":"parameter_estimation/#Load-Packages","page":"Parameter Estimation","title":"Load Packages","text":"","category":"section"},{"location":"parameter_estimation/","page":"Parameter Estimation","title":"Parameter Estimation","text":"The first step is to load the required packages.","category":"page"},{"location":"parameter_estimation/","page":"Parameter Estimation","title":"Parameter Estimation","text":"using Plots\nusing Random\nusing Turing\nusing UtilityModels\nRandom.seed!(8741)","category":"page"},{"location":"parameter_estimation/","page":"Parameter Estimation","title":"Parameter Estimation","text":"gamble1 = Gamble(; \n    p = [.25, .25, .50], \n    v = [44, 40, 5]\n)\n\ngamble2 = Gamble(; \n    p = [.25, .25, .50], \n    v = [98, 10, 5]\n)\n\ngambles = [gamble1,gamble2]\n\nchoices  = [1,1,2,1,2]","category":"page"},{"location":"parameter_estimation/","page":"Parameter Estimation","title":"Parameter Estimation","text":"@model function model(choices, gambles)\n\n    α ~ Gamma(2, 3) \n\n    (choices, gambles) ~ ExpectedUtility(; α, θ = 1.0)\nend","category":"page"},{"location":"parameter_estimation/","page":"Parameter Estimation","title":"Parameter Estimation","text":"model(choices, gambles)()","category":"page"},{"location":"expected_utility/#Expected-Utility-Theory","page":"Expected Utility Theory","title":"Expected Utility Theory","text":"","category":"section"},{"location":"expected_utility/","page":"Expected Utility Theory","title":"Expected Utility Theory","text":"The Leaky Competing Accumulator (LCA; Usher & McClelland, 2001) is a sequential sampling model in which evidence for options races independently. The LCA is similar to the Linear Ballistic Accumulator (LBA), but additionally assumes an intra-trial noise and leakage (in contrast, the LBA assumes that evidence accumulates in a ballistic fashion, i.e., linearly and deterministically until it hits the threshold).","category":"page"},{"location":"expected_utility/#Example","page":"Expected Utility Theory","title":"Example","text":"","category":"section"},{"location":"expected_utility/","page":"Expected Utility Theory","title":"Expected Utility Theory","text":"In this example, we will demonstrate how to use the LCA in a generic two alternative forced choice task. ","category":"page"},{"location":"expected_utility/","page":"Expected Utility Theory","title":"Expected Utility Theory","text":"using Plots\nusing Random\nusing UtilityModels","category":"page"},{"location":"expected_utility/#Load-Packages","page":"Expected Utility Theory","title":"Load Packages","text":"","category":"section"},{"location":"expected_utility/","page":"Expected Utility Theory","title":"Expected Utility Theory","text":"The first step is to load the required packages.","category":"page"},{"location":"expected_utility/","page":"Expected Utility Theory","title":"Expected Utility Theory","text":"using Plots\nusing Random\nusing UtilityModels\nRandom.seed!(8741)","category":"page"},{"location":"expected_utility/#Create-Model-Object","page":"Expected Utility Theory","title":"Create Model Object","text":"","category":"section"},{"location":"expected_utility/","page":"Expected Utility Theory","title":"Expected Utility Theory","text":"In the code below, we will define parameters for the LBA and create a model object to store the parameter values. ","category":"page"},{"location":"expected_utility/#Utility-Curvature","page":"Expected Utility Theory","title":"Utility Curvature","text":"","category":"section"},{"location":"expected_utility/","page":"Expected Utility Theory","title":"Expected Utility Theory","text":"The utility curvature parameter alpha controls whether the utility function is concave, linear, or convex. The utility function is given by:","category":"page"},{"location":"expected_utility/","page":"Expected Utility Theory","title":"Expected Utility Theory","text":"U(x) = mathrmsign(x)x^alpha","category":"page"},{"location":"expected_utility/","page":"Expected Utility Theory","title":"Expected Utility Theory","text":"The parameter alpha can be intrepreted in terms of risk profile as follows: ","category":"page"},{"location":"expected_utility/","page":"Expected Utility Theory","title":"Expected Utility Theory","text":"risk averse: 0 geq alpha  1\nrisk neutral: alpha = 1\nrisk seeking: alpha  1","category":"page"},{"location":"expected_utility/","page":"Expected Utility Theory","title":"Expected Utility Theory","text":"The utility function U(x) is plotted below for a range of values of alpha. ","category":"page"},{"location":"expected_utility/","page":"Expected Utility Theory","title":"Expected Utility Theory","text":"<details><summary>Show Plotting Code</summary>","category":"page"},{"location":"expected_utility/","page":"Expected Utility Theory","title":"Expected Utility Theory","text":"model = ExpectedUtility()\nvals = [-20:.5:20;]\ngamble = Gamble(; v = vals)\nαs = range(0, 1.5, length = 5) \nutilities = [compute_utility(ExpectedUtility(; α) , gamble) for α ∈ αs]\nutility_plot = plot(vals, utilities, xlabel = \"x\", ylabel = \"U(x)\", labels = αs', legendtitle = \"α\", grid = false)","category":"page"},{"location":"expected_utility/","page":"Expected Utility Theory","title":"Expected Utility Theory","text":"</details>","category":"page"},{"location":"expected_utility/","page":"Expected Utility Theory","title":"Expected Utility Theory","text":"utility_plot","category":"page"},{"location":"expected_utility/","page":"Expected Utility Theory","title":"Expected Utility Theory","text":"Below, we set the alpha parameter to a value associated with moderate risk aversion. ","category":"page"},{"location":"expected_utility/","page":"Expected Utility Theory","title":"Expected Utility Theory","text":"α = .80","category":"page"},{"location":"expected_utility/#Decisional-Consistency","page":"Expected Utility Theory","title":"Decisional Consistency","text":"","category":"section"},{"location":"expected_utility/","page":"Expected Utility Theory","title":"Expected Utility Theory","text":"θ = 1.0","category":"page"},{"location":"expected_utility/#LCA-Constructor","page":"Expected Utility Theory","title":"LCA Constructor","text":"","category":"section"},{"location":"expected_utility/","page":"Expected Utility Theory","title":"Expected Utility Theory","text":"Now that values have been asigned to the parameters, we will pass them to LCA to generate the model object.","category":"page"},{"location":"expected_utility/","page":"Expected Utility Theory","title":"Expected Utility Theory","text":"dist = ExpectedUtility(; α, θ)","category":"page"},{"location":"expected_utility/#Simulate-Model","page":"Expected Utility Theory","title":"Simulate Model","text":"","category":"section"},{"location":"expected_utility/","page":"Expected Utility Theory","title":"Expected Utility Theory","text":"Now that the model is defined, we will generate 10000 choices and reaction times using rand. ","category":"page"},{"location":"expected_utility/","page":"Expected Utility Theory","title":"Expected Utility Theory","text":" choices,rts = rand(dist, 10_000)","category":"page"},{"location":"expected_utility/","page":"Expected Utility Theory","title":"Expected Utility Theory","text":"In the code block above, rand has a keyword argument Δt which controls the precision of the discrete approximation. The default value is Δt = .001.","category":"page"},{"location":"expected_utility/#Compute-Choice-Probability","page":"Expected Utility Theory","title":"Compute Choice Probability","text":"","category":"section"},{"location":"expected_utility/","page":"Expected Utility Theory","title":"Expected Utility Theory","text":"The choice probability Pr(C=c) is computed by passing the model and choice index to cdf along with a large value for time as the second argument.","category":"page"},{"location":"expected_utility/","page":"Expected Utility Theory","title":"Expected Utility Theory","text":"cdf(dist, 1, Inf)","category":"page"},{"location":"expected_utility/#Plot-Simulation","page":"Expected Utility Theory","title":"Plot Simulation","text":"","category":"section"},{"location":"expected_utility/","page":"Expected Utility Theory","title":"Expected Utility Theory","text":"The code below plots a histogram for each option.","category":"page"},{"location":"expected_utility/","page":"Expected Utility Theory","title":"Expected Utility Theory","text":"histogram(dist)","category":"page"},{"location":"#UtilityModels.jl","page":"Home","title":"UtilityModels.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for UtilityModels.jl","category":"page"}]
}
